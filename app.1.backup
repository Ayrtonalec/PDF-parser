var express = require('express');
var app = express();
var pdfjsLib = require('pdfjs-dist');
var fs = require('fs');
var async = require('async');


var operator = require('./core/Operator_class');

const winston = require('winston');

let logger = new (winston.Logger)({
    transports: [
        new (winston.transports.Console)(),
        new (winston.transports.File)({ filename: '/tmp/somefile.log' })
    ]
});

var formatted = {}; // Eind formaat



var lastPromise; // will be used to chain promises
var Content_array = Array();

// var pdfPath = process.argv[2] || './pdf/Double-page.pdf';
// var pdfPath = process.argv[2] || './pdf/angled_2.pdf';
var pdfPath = process.argv[2] || './pdf/flyer_wijk.pdf';
// var pdfPath = process.argv[2] || './pdf/Arnhem.pdf';


// var pdfPath = process.argv[2] || './pdf/Singlepage-singleImage.pdf';

var pageinfo = '';
var numPages = 0;
var data_set = 'false';
app.get('/', function(req, res) {

  var load = 'false';

  // Will be using promises to load document, pages and misc data instead of
  // callback.
  pdfjsLib.getDocument(pdfPath).then(function(doc) {
     numPages = doc.numPages;
    lastPromise = doc.getMetadata();
    var loadPage = function(pageNum) {
      
      
      // doc.getAttachments().then(function(att) {
      //   console.log(att);
     
      // });
      // return
      
      
      return doc.getPage(pageNum).then(function(page) {
        var page_data = {};
        var viewport = page.getViewport(1.0 /* scale */ ); //increase to 2 to increase quality >>>
        var font_data = Array();
        

        page.getTextContent().then(function(content) {
          
          // Setting Page info
    operator.pageInfo(pageNum, viewport, function(map) {
          pageinfo = map;
          
        });
      
        
 

          switch (req.query.filter) {

            case 'text':

              // Content contains lots of information about the text layout and
              // styles, but we need only strings at the moment

              //Test data gather
              Content_array.items = new Array();
              operator.getText(page, pageinfo, content, function(map) {

                Content_array.push(map);
              

                for (i = 0; i < map.length; i++) {

                  if (typeof map[i].fontName !== 'undefined') {

                    font_data.push(map[i].fontName); //gathers the generated font names


                  }
                }
                var newArray = [...new Set(font_data)]; //Making unique



                for (i = 0; i < newArray.length; i++) {

                   content.styles[newArray[i]].fontName = newArray[i];
                  Content_array.push(content.styles[newArray[i]]);

                }

                load = 'true'; // allowence to proceed
              });

              break;
            case 'image':
              //Image function pasting
              operator.getImage(page, pdfjsLib, pageinfo, function(map) {
                Content_array.push(map);
                load = 'true'; // allowence to proceed
              });

              break;
            case 'path':
              //Path function pasting
              operator.getPath(page, pdfjsLib, doc, pageinfo, function(map) {
                Content_array.push(map);
                load = 'true'; // allowence to proceed
              });

              break;
            case 'meta':

              operator.getMeta(doc, function(map) {
                Content_array.push(map);
                load = 'true'; // allowence to proceed
              });



              break;
            default:
              //------------Insert Text and font -------------//

              // Content contains lots of information about the text layout and
              // styles, but we need only strings at the moment

              //Test data gather
              Content_array.items = new Array();
              operator.getText(page, pageinfo, content, function(map) {

                Content_array.push(map);
                // console.log(map);

                for (i = 0; i < map.length; i++) {

                  if (typeof map[i].fontName !== 'undefined') {

                    font_data.push(map[i].fontName); //gathers the generated font names


                  }
                }
                var newArray = [...new Set(font_data)]; //Making unique


                // Content_array.font = new Array();


                for (i = 0; i < newArray.length; i++) {

                  // Content_array.font[newArray[i]] = new Array();
                  content.styles[newArray[i]].fontName = newArray[i];
                  Content_array.push(content.styles[newArray[i]]);

                }

                load = 'true'; // allowence to proceed
              });
                
                
               //------------Insert image -------------//
               
                //Image function pasting
              operator.getImage(page, pdfjsLib, function(map) {
                Content_array.push(map);
                load = 'true'; // allowence to proceed
              });
               
               
               //------------End -------------//
               //------------Insert path -------------//
               
               
               
                //Path function pasting
              operator.getPath(page, pdfjsLib, doc, pageinfo, function(map) {
                Content_array.push(map);
                load = 'true'; // allowence to proceed
              });

                //------------End -------------//
              break; 

          }

          Content_array.pages = Array();
          Content_array.items = Array();
          Content_array.styles = Array();



          for (i = 0; i < content.styles.length; i++) {

            Content_array.push(content.styles);
          }
 


        }).then(function() {
          console.log();
        }); //End getTextContent

        // console.log(Content_array);

        
        // console.log('Size: ' + viewport.width + 'x' + viewport.height);
        // console.log();


        // page_data.page_num = pageNum;
        // page_data.width = viewport.width;
        // page_data.hight = viewport.height;


        // console.log(page.commonObjs); //Should contain font data but does not, it's empty
        // source : https://github.com/mozilla/pdf.js/issues/7914





        //End experimental 

        // return page.getTextContent().then(function(content) {
        //   // Content contains lots of information about the text layout and
        //   // styles, but we need only strings at the moment

        //   var strings = content.items.map(function(item) {
        //     delete item.dir;
        // item.page = pageNum;

        //     Content_array.push(page_data);//PageData
        //     Content_array.push(item);
        //     // console.log(item);
        //     return item.str;
        //   });
        //   // console.log('## Text Content');
        //   // console.log(strings.join(' '));
        // }).then(function() {
        //   console.log();
        // });//End getTextContent


      })

    };


    // Loading of the first page will wait on metadata and subsequent loadings
    // will wait on the previous pages.
    for (var i = 1; i <= numPages; i++) {
      lastPromise = lastPromise.then(loadPage.bind(null, i));
    }
    return lastPromise;


  }).then(function() {
    console.log('# End of Document');
    
    


    var _flagCheck = setInterval(function() { //Checking whether load is set to true
      if (load == 'true') {
        clearInterval(_flagCheck);
        
        
        
            
    formatted.width = Content_array[0][0].width; // 0 = page 0 -> Todo change 0 to loop for each page || Solved by removing the [0]
    formatted.height = Content_array[0][0].height;
    formatted.pages = new Array();
    var temp_formatted = {};
    
 
    
      // console.log(Content_array);
      var temp = new Array();
      var content = new Array(); //@todo: regelen dat de [0] uit content array removed wordt.
      //pushen in a new array
      for (var u = 0; u < Content_array.length; u++){ // 26 loop
       
          // content.push(Content_array[u]);
          console.log("18 loop :      " + Content_array[u].length);
          console.log();
           for (var z = 0; z < Content_array[u].length; z++){ // 18 loop
            console.log(" # " + z + "   :      " + Content_array[u][z].length);
            
               
           if(typeof Content_array[u][z].length !== 'undefined'){
          //     console.log('-----------------------------------------------------------------');
              
          // console.log(Content_array[u][z]);
           
          // console.log('------------------------------------------------------------------');
          // temp.push(Content_array[u][z]);
           
             content.push(Content_array[u]);
            z = Content_array[u].length;
           }else{
          // console.log('-----------------------------------------------------------------');
          // console.log(Content_array[u][z]);
          // console.log('------------------------------------------------------------------');
            content.push(Content_array[u][z]);
            // content.push(Content_array[u]);
           }
           }
          
      
        
        // if(temp.length > 0){
        //   content.push(temp);
        //   console.log(temp);
        // }
        // console.log();
                  // console.log(Content_array[u]);
                  // console.log();
        temp = new Array();
      }
      // console.log();
      // console.log(content);
      // console.log('content length:       ' + content[0].length);
      
      
      // console.log(JSON.stringify(content, 4, null));
      
 
      
      
    for (var x = 1; x <= numPages; x++){
      
      
      
      
      
    console.log('pagenumber = x =   #' + x);
    
    // console.log(Content_array[x]);
    
    
      temp_formatted.number = x;
      temp_formatted.elements = {};
      var name = 0;
      var i = 0;
        for (i = 0; i < content.length; i++){
        
        
       var data = content[i];
        // console.log('Content Page : ' + data.page + '     ||     Loop Nr.  ' + i);
          
                 
                 
                 
         try {
      
        // console.log(data)
          // console.log('elementnumber = i =   #' + i);
          //   // console.log('element_page = ' + Content_array[0][i].page);
          //   console.log(data)
            // console.log(Content_array[0][i]);
            // console.log(i);
            
           
             
          if(data.page == x ){
            console.log('elementnumber = i =   #' + i);
            // console.log(data)
             
         
          
         if(data.page_num == null){
           temp_formatted.elements.name = 'Object' + name++;
          // console.log(Content_array[0][i]);
           
            temp_formatted.elements.type;
            
            
          
        }
         
          
        if(data.str != null){ // If text
         temp_formatted.elements.type = 'text';
          temp_formatted.elements.width = data.width;
          temp_formatted.elements.height = data.height;
          temp_formatted.elements.x = data.transform[4];
          temp_formatted.elements.y = data.transform[5];
          temp_formatted.elements.a; //Rotation variable (still to be calculated how many degrees it's turned)
          temp_formatted.elements.z = name; //z-index (++ variable)
          temp_formatted.elements.settings = {};
            temp_formatted.elements.settings.text = data.str;
            temp_formatted.elements.settings.fontFamily = data.fontName;
          
            // formatted.pages.push(JSON.stringify(temp_formatted));
            // formatted.pages.push(JSON.stringify(temp_formatted).replace('\\', ''));
              formatted.pages.push(JSON.parse(JSON.stringify(temp_formatted)));
            
            
            
   
            // console.log();
            // console.log(temp_formatted);
            // console.log(Content_array[0][i]);
            // console.log(JSON.stringify(temp_formatted, null, 4));
            console.log();
        }else if(data.img_name != null){ // If image
        temp_formatted.elements.width = data.width;
          temp_formatted.elements.height = data.height;
          temp_formatted.elements.x = data.transform[4];
          temp_formatted.elements.y = data.transform[5];
          temp_formatted.elements.a; //Rotation variable (still to be calculated how many degrees it's turned)
          temp_formatted.elements.z = name; //z-index (++ variable)
          temp_formatted.elements.settings = {};
        
        
               temp_formatted.elements.type = 'image';
          
            // temp_formatted.elements.settings.src = data.src; //SRC voor base 64
           
          
          
              formatted.pages.push(JSON.parse(JSON.stringify(temp_formatted)));
            
            

        }else if(data[0] == 'M'){ // If path
       
          temp_formatted.elements.x = data[1];
          temp_formatted.elements.y = data[2];
          temp_formatted.elements.a //Rotation variable (still to be calculated how many degrees it's turned)
          temp_formatted.elements.z = name //z-index (++ variable)
          temp_formatted.elements.settings = data;
               temp_formatted.elements.type = 'path';
               
          
            // temp_formatted.elements.settings.src = data.src; //SRC voor base 64
           
         
         
              formatted.pages.push(JSON.parse(JSON.stringify(temp_formatted)));
            
            
        
        
        }//END if
            
        }// END page = x loop
        // console.log(formatted);
    //             console.log('elementnumber = i =   #' + i);
    //     console.log(content);
    // console.log();
    //     console.log(); console.log();
    //     console.log();  
        }// Element try loop
        catch(err) {
          }// END IF PAGE = correct PAGE loop
        
        
        
        
        }// FORCED IF TO CHECK WHETHER PAGE EVEN EXCISTS
        console.log();
        
    }// END pages loop
        
        // console.log(formatted);
        console.log();
        console.log();
        // console.log();
        // console.log();
        // console.log(Content_array);
        res.send(formatted);
      }
    }, 1000); // interval set at 100 milliseconds


    // res.send({ content: Content_array });
    Content_array = Array();
  }, function(err) {
    console.error('Error: ' + err);
  });

});




app.listen(8080, function() {
  console.log('Example app listening on port 8080!');
});

module.exports = app